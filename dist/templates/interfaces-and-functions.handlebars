{{#*inline "tablePartial"}}
export interface {{interfaceName}} {{#if extends}}extends {{extends}} {{/if}}{
  {{#each additionalProperties as |prop|}}
  {{prop}}
  {{/each}}
  {{#each columns}}
  "{{propertyName}}"{{#if optional}}?{{/if}}: {{propertyType}} {{#if nullable}}| null {{/if}}
  {{/each}}
}
{{/inline}}
{{#*inline "funcAllFieldsPartial"}}
export async function get{{interfaceName}}AllFields(client:Knex){
  return client<{{interfaceName}}>("{{interfaceName}}")
}
{{/inline}}
{{#*inline "funcBasicFieldsPartial"}}
export async function get{{interfaceName}}BasicFields(client:Knex){
  type Get{{interfaceName}}BasicFieldsOutput = {
    {{#each columns}}
    {{#unless nullable}} 
    "{{propertyName}}"{{#if optional}}?{{/if}}: {{propertyType}} {{#if nullable}}| null {{/if}}
    {{/unless}}
    {{/each}}
  }

  return client
  .from<{{interfaceName}}>("{{interfaceName}}")
  .select<Get{{interfaceName}}BasicFieldsOutput>(
    {{#each columns}}
    {{#unless nullable}} 
    "{{propertyName}}",
    {{/unless}}
    {{/each}}
  )
}
{{/inline}}
/*
* This file was generated by a tool.
* Rerun sql-ts to regenerate this file.
*/

import Knex from 'knex';

{{#if config.schemaAsNamespace}}
{{#each grouped as |tables key|}}
export namespace {{key}} {
{{#each tables as |table|}}
  {{> tablePartial table}}  
  {{> funcAllFieldsPartial table}}
  {{> funcBasicFieldsPartial table}}
{{/each}}
{{/each}}
}
{{else}}
{{#each tables as |table|}}
{{> tablePartial table}}
{{> funcAllFieldsPartial table}}
{{> funcBasicFieldsPartial table}}
{{/each}}
{{/if}}